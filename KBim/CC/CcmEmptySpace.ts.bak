///<reference path="CcmEntity.ts" />
namespace KBim {
    export class CcmEmptySpace extends CcmEntity {
        boundary: U1.Vector3[];
        holes: Array<U1.Vector3>[];  

        ReadJson(json: any) {
            super.ReadJson(json);

            let strboundary: string = json["boundary"];
            let strHoleArr : string[] = json["holes"];
            this.boundary = [];

            if (strboundary != null) {
                let xys = strboundary.split(" "); 
                for (let xy of xys) {
                    let fs = xy.split(",");
                    let p = new U1.Vector3();
                    p.X = parseFloat(fs[0]);
                    p.Y = parseFloat(fs[1]); 
                    this.boundary.push(p);
                }
            }

            if (Array.isArray(strHoleArr)) {
                this.holes = [];

                for (let strHole of strHoleArr) {
                    let hole: U1.Vector3[] = [];

                    let xys = strHole.split(" ");
                    for (let xy of xys) {
                        let fs = xy.split(",");
                        let p = new U1.Vector3();
                        p.X = parseFloat(fs[0]);
                        p.Y = parseFloat(fs[1]);
                        hole.push(p);
                    }
                    if (hole.length > 2) {
                        this.holes.push(hole);
                    }
                }
            }
        }
        get BBX()
        {
            if (this.boundary != null)
                return U1.BoundingBox.CreateFromPoints(this.boundary);
            super.BBX;
        }
        FillLineGeometry(lineGeom: U1.LineBufferGeometry, tm?: U1.Matrix4)
        {
            var z = this.GetIfcNode()?.Min?.Z ??
                this.GetModel().geomMin.Z;

            var scl = this.Selector.Result.CoordScale;

            var wm = U1.Matrix4.CreateScaleByFloats(scl, scl, scl);
            wm.Multiply(U1.Matrix4.CreateTranslationFloats(0, 0, z));

            if (tm != null)
                wm.Multiply(tm);

            lineGeom.AddppendPolygon(this.boundary, wm);
            if (this.holes != null)
            {
                for (var hole of this.holes) {
                    lineGeom.AddppendPolygon(hole, wm);
                }
            }  
        }
    }
}